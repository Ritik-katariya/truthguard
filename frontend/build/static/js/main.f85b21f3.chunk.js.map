{"version":3,"sources":["config.js","services/api.js","pages/Homepage.js","pages/DashboardPage.js","app.js","index.js"],"names":["ENDPOINTS","checkContent","async","response","axios","post","concat","process","content","timeout","data","Error","history","JSON","parse","localStorage","getItem","unshift","setItem","stringify","slice","error","_error$response","_error$response$data","console","code","getAnalysisHistory","clearHistory","removeItem","Homepage","input","setInput","useState","result","setResult","savedResult","sessionStorage","loading","setLoading","setError","categoryExplanations","Factual","Misleading","Opinion","False","useEffect","getStatusColor","score","TruthMeter","_ref","getGradientColor","React","createElement","className","style","left","backgroundColor","color","getTruthLabel","SourceAnalysis","_ref2","sourceAnalysis","sources","length","map","source","index","key","type","getSourceIcon","name","verification","status","includes","getReliabilityColor","reliability","confidence","NewsVerification","_ref3","newsVerification","verdict","getVerdictColor","matchedArticles","article","href","url","target","rel","title","Date","publishedAt","toLocaleDateString","value","onChange","e","placeholder","rows","disabled","onClick","trim","_analysisResult$credi","_analysisResult$credi2","_analysisResult$sourc","_analysisResult$sourc2","analysisResult","contentAnalysis","transformedResult","_objectSpread","verificationResult","labels","scores","credibilityMetrics","credibilityScore","truthScore","_error$response2","_error$response2$data","errorMessage","details","message","renderResult","isNews","padding","borderRadius","marginBottom","contentType","renderContentTypeAlert","Fragment","metrics","width","label","authenticity","level","renderCredibilityMetrics","charAt","toUpperCase","Math","round","Link","to","DashboardPage","handleClearHistory","window","location","reload","item","_item$sourceAnalysis","dateString","toLocaleString","formatDate","timestamp","substring","App","Router","Routes","Route","path","element","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.f85b21f3.chunk.js","sourcesContent":["// API URL from environment variable with fallback\r\nexport const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\r\n\r\n// Other configuration constants\r\nexport const API_TIMEOUT = 120000; // 2 minutes\r\nexport const MAX_HISTORY_ITEMS = 50;\r\n\r\n// API endpoints\r\nexport const ENDPOINTS = {\r\n    CHECK: '/check',\r\n    STATUS: '/status'\r\n};\r\n\r\n// App configuration\r\nexport const APP_CONFIG = {\r\n    name: 'TruthGuard',\r\n    version: '1.0.0',\r\n    description: 'Your trusted content verification platform'\r\n};\r\n","import axios from 'axios';\r\nimport { API_URL, API_TIMEOUT, MAX_HISTORY_ITEMS, ENDPOINTS } from '../config.js';\r\n\r\n\r\nexport const checkContent = async (content) => {\r\n    try {\r\n        const response = await axios.post(`${API_URL}${ENDPOINTS.CHECK}`, { content }, {\r\n            timeout: API_TIMEOUT\r\n        });\r\n        \r\n        // Validate response\r\n        if (!response.data || typeof response.data !== 'object') {\r\n            throw new Error('Invalid response from server');\r\n        }\r\n\r\n        // Store in local history after successful analysis\r\n        const history = JSON.parse(localStorage.getItem('analysisHistory') || '[]');\r\n        history.unshift(response.data);\r\n        localStorage.setItem('analysisHistory', JSON.stringify(history.slice(0, MAX_HISTORY_ITEMS)));\r\n        \r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('API Error:', error);\r\n        if (error.code === 'ECONNABORTED') {\r\n            throw new Error('Request timed out. Please try again.');\r\n        }\r\n        if (error.response?.data?.error) {\r\n            throw new Error(error.response.data.error);\r\n        }\r\n        throw new Error('Failed to analyze content. Please try again.');\r\n    }\r\n};\r\n\r\nexport const getAnalysisHistory = () => {\r\n    return JSON.parse(localStorage.getItem('analysisHistory') || '[]');\r\n};\r\n\r\nexport const clearHistory = () => {\r\n    localStorage.removeItem('analysisHistory');\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Homepage.css';\r\nimport { checkContent } from '../services/api';\r\n\r\nfunction Homepage() {\r\n    const [input, setInput] = useState('');\r\n    const [result, setResult] = useState(() => {\r\n        const savedResult = sessionStorage.getItem('lastAnalysisResult');\r\n        return savedResult ? JSON.parse(savedResult) : null;\r\n    });\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const categoryExplanations = {\r\n        Factual: \"Content appears to be based on verifiable facts and evidence\",\r\n        Misleading: \"Content may contain partial truths but is presented in a way that could deceive\",\r\n        Opinion: \"Content represents personal views rather than objective facts\",\r\n        False: \"Content contains information that appears to be incorrect\"\r\n    };\r\n\r\n    const handleCheck = async () => {\r\n        if (!input.trim()) {\r\n            setError('Please enter some content to verify');\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const analysisResult = await checkContent(input);\r\n            \r\n            if (!analysisResult || !analysisResult.contentAnalysis) {\r\n                throw new Error('Invalid response format from analysis');\r\n            }\r\n\r\n            const transformedResult = {\r\n                ...analysisResult,\r\n                verificationResult: analysisResult.verificationResult || {\r\n                    labels: [],\r\n                    scores: []\r\n                },\r\n                credibilityMetrics: {\r\n                    ...analysisResult.credibilityMetrics,\r\n                    credibilityScore: analysisResult.credibilityMetrics?.credibilityScore || 0,\r\n                    truthScore: analysisResult.credibilityMetrics?.truthScore || 0\r\n                },\r\n                sourceAnalysis: {\r\n                    ...analysisResult.sourceAnalysis,\r\n                    sources: analysisResult.sourceAnalysis?.sources || [],\r\n                    verification: analysisResult.sourceAnalysis?.verification || null\r\n                }\r\n            };\r\n\r\n            setResult(transformedResult);\r\n            sessionStorage.setItem('lastAnalysisResult', JSON.stringify(transformedResult));\r\n        } catch (error) {\r\n            console.error('Error Details:', error);\r\n            const errorMessage = error.response?.data?.details || \r\n                               error.response?.data?.error || \r\n                               error.message || \r\n                               'Failed to analyze content';\r\n            setError(errorMessage);\r\n            setResult(null);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            if (result) {\r\n                sessionStorage.setItem('lastAnalysisResult', JSON.stringify(result));\r\n            }\r\n        };\r\n    }, [result]);\r\n\r\n    const getStatusColor = (score) => {\r\n        if (score >= 70) return '#28a745';  // Green for high credibility\r\n        if (score >= 40) return '#ffc107';  // Yellow for medium credibility\r\n        return '#dc3545';                   // Red for low credibility\r\n    };\r\n\r\n    const renderContentTypeAlert = (contentAnalysis) => {\r\n        if (!contentAnalysis.isNews) {\r\n            return (\r\n                <div className=\"content-type-alert\" style={{ backgroundColor: '#f8d7da', color: '#721c24', padding: '1rem', borderRadius: '8px', marginBottom: '1rem' }}>\r\n                    <strong>Note:</strong> This content appears to be a {contentAnalysis.contentType} rather than a news article.\r\n                    Confidence: {contentAnalysis.confidence}%\r\n                </div>\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n\r\n    const TruthMeter = ({ score }) => {\r\n        const getGradientColor = (score) => {\r\n            if (score >= 70) return '#28a745';  // Green for highly true\r\n            if (score >= 50) return '#ffc107';  // Yellow for uncertain\r\n            return '#dc3545';                   // Red for likely false\r\n        };\r\n\r\n        const getTruthLabel = (score) => {\r\n            if (score >= 70) return 'Likely True';\r\n            if (score >= 50) return 'Uncertain';\r\n            return 'Likely False';\r\n        };\r\n\r\n        return (\r\n            <div className=\"truth-meter\">\r\n                <h4>Truth Meter</h4>\r\n                <div className=\"meter-container\">\r\n                    <div className=\"meter-scale\">\r\n                        <div className=\"meter-gradient\"></div>\r\n                        <div \r\n                            className=\"meter-pointer\"\r\n                            style={{ \r\n                                left: `${score}%`,\r\n                                backgroundColor: getGradientColor(score)\r\n                            }}\r\n                        >\r\n                            <div className=\"pointer-label\">{score}%</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"meter-labels\">\r\n                        <span className=\"false-label\">False</span>\r\n                        <span className=\"uncertain-label\">Uncertain</span>\r\n                        <span className=\"true-label\">True</span>\r\n                    </div>\r\n                    <div className=\"truth-verdict\" style={{ color: getGradientColor(score) }}>\r\n                        {getTruthLabel(score)}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const renderCredibilityMetrics = (metrics) => {\r\n        if (!metrics) return null;\r\n\r\n        return (\r\n            <div className=\"credibility-metrics\">\r\n                <h4>Content Credibility Analysis</h4>\r\n                \r\n                <TruthMeter score={metrics.truthScore} />\r\n                \r\n                <div className=\"metrics-grid\">\r\n                    <div className=\"metric-item\">\r\n                        <span className=\"metric-label\">Overall Credibility</span>\r\n                        <div className=\"metric-value\" style={{ color: getStatusColor(metrics.credibilityScore) }}>\r\n                            {metrics.credibilityScore}%\r\n                        </div>\r\n                        <div className=\"metric-bar\">\r\n                            <div \r\n                                className=\"metric-fill\" \r\n                                style={{ \r\n                                    width: `${metrics.credibilityScore}%`,\r\n                                    backgroundColor: getStatusColor(metrics.credibilityScore)\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    {metrics.reliability && (\r\n                        <div className=\"metric-item\">\r\n                            <span className=\"metric-label\">Reliability ({metrics.reliability.label})</span>\r\n                            <div className=\"metric-value\" style={{ color: getStatusColor(metrics.reliability.score) }}>\r\n                                {metrics.reliability.score}%\r\n                            </div>\r\n                            <div className=\"metric-bar\">\r\n                                <div \r\n                                    className=\"metric-fill\" \r\n                                    style={{ \r\n                                        width: `${metrics.reliability.score}%`,\r\n                                        backgroundColor: getStatusColor(metrics.reliability.score)\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n\r\n                    {metrics.authenticity && (\r\n                        <div className=\"metric-item\">\r\n                            <span className=\"metric-label\">Authenticity ({metrics.authenticity.level})</span>\r\n                            <div className=\"metric-value\" style={{ color: getStatusColor(metrics.authenticity.score) }}>\r\n                                {metrics.authenticity.score}%\r\n                            </div>\r\n                            <div className=\"metric-bar\">\r\n                                <div \r\n                                    className=\"metric-fill\" \r\n                                    style={{ \r\n                                        width: `${metrics.authenticity.score}%`,\r\n                                        backgroundColor: getStatusColor(metrics.authenticity.score)\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const SourceAnalysis = ({ sourceAnalysis }) => {\r\n        if (!sourceAnalysis || !sourceAnalysis.sources.length) {\r\n            return (\r\n                <div className=\"source-analysis no-sources\">\r\n                    <h4>Source Analysis</h4>\r\n                    <p>No identifiable sources found in the content.</p>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const getSourceIcon = (type) => {\r\n            switch (type) {\r\n                case 'Major News Agency': return '📰';\r\n                case 'Social Media': return '📱';\r\n                case 'Website': return '🌐';\r\n                case 'Cited Source': return '📝';\r\n                default: return '📄';\r\n            }\r\n        };\r\n\r\n        const getReliabilityColor = (status) => {\r\n            if (status?.includes('reliable')) return '#28a745';\r\n            if (status?.includes('unreliable')) return '#dc3545';\r\n            return '#ffc107';\r\n        };\r\n\r\n        return (\r\n            <div className=\"source-analysis\">\r\n                <h4>Source Analysis</h4>\r\n                <div className=\"sources-list\">\r\n                    {sourceAnalysis.sources.map((source, index) => (\r\n                        <div key={index} className=\"source-item\">\r\n                            <span className=\"source-icon\">{getSourceIcon(source.type)}</span>\r\n                            <div className=\"source-details\">\r\n                                <span className=\"source-name\">{source.name}</span>\r\n                                <span className=\"source-type\">{source.type}</span>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                {sourceAnalysis.verification && (\r\n                    <div className=\"source-reliability\" \r\n                         style={{ color: getReliabilityColor(sourceAnalysis.verification.reliability) }}>\r\n                        <span className=\"reliability-label\">Source Reliability:</span>\r\n                        <span className=\"reliability-value\">\r\n                            {sourceAnalysis.verification.reliability} \r\n                            ({sourceAnalysis.verification.confidence}% confidence)\r\n                        </span>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const NewsVerification = ({ newsVerification }) => {\r\n        if (!newsVerification) return null;\r\n\r\n        const getVerdictColor = (verdict) => {\r\n            return verdict === 'REAL' ? '#28a745' : '#dc3545';\r\n        };\r\n\r\n        return (\r\n            <div className=\"news-verification\">\r\n                <h4>News Verification</h4>\r\n                <div className=\"verdict\" style={{ color: getVerdictColor(newsVerification.verdict) }}>\r\n                    <strong>Verdict: {newsVerification.verdict}</strong>\r\n                    <span className=\"confidence\">Confidence: {newsVerification.confidence}%</span>\r\n                </div>\r\n                \r\n                {newsVerification.matchedArticles.length > 0 && (\r\n                    <div className=\"matched-articles\">\r\n                        <h5>Similar Articles Found:</h5>\r\n                        {newsVerification.matchedArticles.map((article, index) => (\r\n                            <div key={index} className=\"article\">\r\n                                <a href={article.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                    {article.title}\r\n                                </a>\r\n                                <div className=\"article-meta\">\r\n                                    <span>{article.source}</span>\r\n                                    <span>{new Date(article.publishedAt).toLocaleDateString()}</span>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const renderResult = () => {\r\n        if (!result) return null;\r\n\r\n        try {\r\n            return (\r\n                <div className=\"result\">\r\n                    <h3>Content Analysis Result</h3>\r\n                    \r\n                    {renderContentTypeAlert(result.contentAnalysis)}\r\n                    \r\n                    {result.contentAnalysis.isNews && (\r\n                        <>\r\n                            <SourceAnalysis sourceAnalysis={result.sourceAnalysis} />\r\n                            {renderCredibilityMetrics(result.credibilityMetrics)}\r\n                            \r\n                            {result.verificationResult && result.verificationResult.labels && (\r\n                                <div className=\"detailed-results\">\r\n                                    <h4>Verification Details</h4>\r\n                                    <div className=\"verification-breakdown\">\r\n                                        {result.verificationResult.labels.map((label, index) => (\r\n                                            <div key={label} className=\"verification-item\">\r\n                                                <div className=\"verification-label\">\r\n                                                    {label.charAt(0).toUpperCase() + label.slice(1)}\r\n                                                    <div className=\"label-explanation\">\r\n                                                        {categoryExplanations[label.charAt(0).toUpperCase() + label.slice(1)] || \r\n                                                         'Classification category'}\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"verification-bar-container\">\r\n                                                    <div \r\n                                                        className=\"verification-bar\"\r\n                                                        style={{\r\n                                                            width: `${Math.round((result.verificationResult.scores[index] || 0) * 100)}%`,\r\n                                                            backgroundColor: getStatusColor((result.verificationResult.scores[index] || 0) * 100)\r\n                                                        }}\r\n                                                    />\r\n                                                    <span className=\"verification-percentage\">\r\n                                                        {Math.round((result.verificationResult.scores[index] || 0) * 100)}%\r\n                                                    </span>\r\n                                                </div>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </>\r\n                    )}\r\n                    \r\n                    <NewsVerification newsVerification={result.newsVerification} />\r\n                </div>\r\n            );\r\n        } catch (error) {\r\n            console.error('Error rendering result:', error);\r\n            return (\r\n                <div className=\"error-message\">\r\n                    Error displaying results. Please try again.\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"homepage\">\r\n            <header className=\"header\">\r\n                <h1>TruthGuard</h1>\r\n                <p>Your trusted content verification platform</p>\r\n            </header>\r\n\r\n            <main className=\"content-checker\">\r\n                <div className=\"input-section\">\r\n                    <textarea\r\n                        value={input}\r\n                        onChange={(e) => setInput(e.target.value)}\r\n                        placeholder=\"Enter content to verify...\"\r\n                        rows=\"6\"\r\n                        disabled={loading}\r\n                    />\r\n                    {error && <div className=\"error-message\">{error}</div>}\r\n                    <button \r\n                        onClick={handleCheck} \r\n                        disabled={loading || !input.trim()}\r\n                        className={loading ? 'loading' : ''}\r\n                    >\r\n                        {loading ? 'Analyzing...' : 'Verify Content'}\r\n                    </button>\r\n                </div>\r\n\r\n                {renderResult()}\r\n            </main>\r\n\r\n            <footer className=\"footer\">\r\n                <Link to=\"/dashboard\" className=\"dashboard-link\">\r\n                    View Analysis History\r\n                </Link>\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Homepage;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { getAnalysisHistory, clearHistory } from '../services/api';\r\nimport './DashboardPage.css';\r\n\r\nfunction DashboardPage() {\r\n    const history = getAnalysisHistory();\r\n\r\n    const handleClearHistory = () => {\r\n        clearHistory();\r\n        window.location.reload();\r\n    };\r\n\r\n    const formatDate = (dateString) => {\r\n        return new Date(dateString).toLocaleString();\r\n    };\r\n\r\n    const getStatusColor = (score) => {\r\n        if (score >= 70) return '#28a745';  // Green for high credibility\r\n        if (score >= 40) return '#ffc107';  // Yellow for medium credibility\r\n        return '#dc3545';                   // Red for low credibility\r\n    };\r\n\r\n    return (\r\n        <div className=\"dashboard\">\r\n            <header className=\"dashboard-header\">\r\n                <h1>Analysis History</h1>\r\n                <div className=\"header-actions\">\r\n                    <Link to=\"/\" className=\"back-button\">Back to Analyzer</Link>\r\n                    {history.length > 0 && (\r\n                        <button onClick={handleClearHistory} className=\"clear-button\">\r\n                            Clear History\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            </header>\r\n\r\n            <main className=\"history-content\">\r\n                {history.length === 0 ? (\r\n                    <div className=\"no-history\">\r\n                        <p>No analysis history available</p>\r\n                        <Link to=\"/\" className=\"start-analysis\">Start Your First Analysis</Link>\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"history-list\">\r\n                        {history.map((item, index) => (\r\n                            <div key={index} className=\"history-item\">\r\n                                <div className=\"history-meta\">\r\n                                    <span className=\"timestamp\">{formatDate(item.timestamp)}</span>\r\n                                    <span className={`content-type ${item.contentAnalysis.isNews ? 'news' : 'not-news'}`}>\r\n                                        {item.contentAnalysis.contentType}\r\n                                    </span>\r\n                                </div>\r\n                                <div className=\"content-preview\">\r\n                                    {item.content.substring(0, 200)}...\r\n                                </div>\r\n                                <div className=\"analysis-summary\">\r\n                                    {item.contentAnalysis.isNews && (\r\n                                        <>\r\n                                            <div className=\"metric\">\r\n                                                <span>Credibility:</span>\r\n                                                <strong style={{ color: getStatusColor(item.credibilityMetrics.credibilityScore) }}>\r\n                                                    {item.credibilityMetrics.credibilityScore}%\r\n                                                </strong>\r\n                                            </div>\r\n                                            <div className=\"metric\">\r\n                                                <span>Truth Score:</span>\r\n                                                <strong style={{ color: getStatusColor(item.credibilityMetrics.truthScore) }}>\r\n                                                    {item.credibilityMetrics.truthScore}%\r\n                                                </strong>\r\n                                            </div>\r\n                                            {item.sourceAnalysis?.verification && (\r\n                                                <div className=\"metric\">\r\n                                                    <span>Source Reliability:</span>\r\n                                                    <strong style={{ color: getStatusColor(item.sourceAnalysis.verification.confidence) }}>\r\n                                                        {item.sourceAnalysis.verification.reliability}\r\n                                                    </strong>\r\n                                                </div>\r\n                                            )}\r\n                                        </>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DashboardPage;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport Homepage from './pages/Homepage';\r\nimport DashboardPage from './pages/DashboardPage';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Routes>\r\n          <Route path=\"/\" element={<Homepage />} />\r\n          <Route path=\"/dashboard\" element={<DashboardPage />} />\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './app';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n"],"sourceRoot":""}